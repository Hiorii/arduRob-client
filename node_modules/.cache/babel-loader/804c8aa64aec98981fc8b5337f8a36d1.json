{"ast":null,"code":"import{combineReducers,createStore,applyMiddleware}from'redux';import{composeWithDevTools}from'redux-devtools-extension';import thunk from'redux-thunk';import{initialState}from'./initialState';import{reducer as productsReducer}from'./productRedux';import{reducer as categoryReducer}from'./categoryRedux';import{reducer as cartReducer}from'./cartRedux';import{reducer as usersReducer}from'./userRedux';// define reducers\nvar reducers={products:productsReducer,category:categoryReducer,cart:cartReducer,users:usersReducer};// add blank reducers for initial state properties without reducers\nObject.keys(initialState).forEach(function(item){if(typeof reducers[item]=='undefined'){reducers[item]=function(){var statePart=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;return statePart;};}});var combinedReducers=combineReducers(reducers);// create store\nexport var store=createStore(combinedReducers,initialState,composeWithDevTools(applyMiddleware(thunk)));","map":{"version":3,"sources":["/home/hiorii/Desktop/arduRob/client/src/redux/store.js"],"names":["combineReducers","createStore","applyMiddleware","composeWithDevTools","thunk","initialState","reducer","productsReducer","categoryReducer","cartReducer","usersReducer","reducers","products","category","cart","users","Object","keys","forEach","item","statePart","combinedReducers","store"],"mappings":"AAAA,OAAQA,eAAR,CAAyBC,WAAzB,CAAsCC,eAAtC,KAA4D,OAA5D,CACA,OAASC,mBAAT,KAAoC,0BAApC,CACA,MAAOC,CAAAA,KAAP,KAAkB,aAAlB,CAEA,OAAQC,YAAR,KAA2B,gBAA3B,CACA,OAAQC,OAAO,GAAIC,CAAAA,eAAnB,KAAyC,gBAAzC,CACA,OAAQD,OAAO,GAAIE,CAAAA,eAAnB,KAAyC,iBAAzC,CACA,OAAQF,OAAO,GAAIG,CAAAA,WAAnB,KAAqC,aAArC,CACA,OAAQH,OAAO,GAAII,CAAAA,YAAnB,KAAsC,aAAtC,CAEA;AACA,GAAMC,CAAAA,QAAQ,CAAG,CACfC,QAAQ,CAAEL,eADK,CAEfM,QAAQ,CAAEL,eAFK,CAGfM,IAAI,CAAEL,WAHS,CAIfM,KAAK,CAAEL,YAJQ,CAAjB,CAOA;AACAM,MAAM,CAACC,IAAP,CAAYZ,YAAZ,EAA0Ba,OAA1B,CAAkC,SAAAC,IAAI,CAAI,CACxC,GAAI,MAAOR,CAAAA,QAAQ,CAACQ,IAAD,CAAf,EAAyB,WAA7B,CAA0C,CACxCR,QAAQ,CAACQ,IAAD,CAAR,CAAiB,cAACC,CAAAA,SAAD,2DAAa,IAAb,OAAsBA,CAAAA,SAAtB,EAAjB,CACD,CACF,CAJD,EAMA,GAAMC,CAAAA,gBAAgB,CAAGrB,eAAe,CAACW,QAAD,CAAxC,CAEA;AACA,MAAO,IAAMW,CAAAA,KAAK,CAAGrB,WAAW,CAC9BoB,gBAD8B,CAE9BhB,YAF8B,CAG9BF,mBAAmB,CACjBD,eAAe,CAACE,KAAD,CADE,CAHW,CAAzB","sourcesContent":["import {combineReducers, createStore, applyMiddleware} from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport {initialState} from './initialState';\nimport {reducer as productsReducer} from './productRedux';\nimport {reducer as categoryReducer} from './categoryRedux';\nimport {reducer as cartReducer} from './cartRedux';\nimport {reducer as usersReducer} from './userRedux';\n\n// define reducers\nconst reducers = {\n  products: productsReducer,\n  category: categoryReducer,\n  cart: cartReducer,\n  users: usersReducer,\n};\n\n// add blank reducers for initial state properties without reducers\nObject.keys(initialState).forEach(item => {\n  if (typeof reducers[item] == 'undefined') {\n    reducers[item] = (statePart = null) => statePart;\n  }\n});\n\nconst combinedReducers = combineReducers(reducers);\n\n// create store\nexport const store = createStore(\n  combinedReducers,\n  initialState,\n  composeWithDevTools(\n    applyMiddleware(thunk)\n  )\n);\n"]},"metadata":{},"sourceType":"module"}