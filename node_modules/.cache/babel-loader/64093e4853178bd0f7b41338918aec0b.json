{"ast":null,"code":"import { initialState } from './initialState';\nimport axios from 'axios';\nimport { API_URL } from '../config';\n/* selectors */\n\nexport const getAllProducts = ({\n  products\n}) => products;\n/* action name creator */\n\nconst reducerName = 'products';\n\nconst createActionName = name => `app/${reducerName}/${name}`;\n/* action types */\n\n\nconst FETCH_START = createActionName('FETCH_START');\nconst FETCH_SUCCESS = createActionName('FETCH_SUCCESS');\nconst FETCH_ERROR = createActionName('FETCH_ERROR');\n/* action creators */\n\nexport const fetchStarted = payload => ({\n  payload,\n  type: FETCH_START\n});\nexport const fetchSuccess = payload => ({\n  payload,\n  type: FETCH_SUCCESS\n});\nexport const fetchError = payload => ({\n  payload,\n  type: FETCH_ERROR\n});\n/* thunk creators */\n\nexport const fetchProducts = () => {\n  return async dispatch => {\n    dispatch(fetchStarted());\n\n    try {\n      const res = await axios.get(`${API_URL}/products`);\n      dispatch(fetchSuccess(res));\n      console.log(res);\n    } catch (err) {\n      dispatch(fetchError(err.message || true));\n    }\n  };\n};\n/* reducer */\n\nexport const reducer = (statePart = initialState, action = {}) => {\n  switch (action.type) {\n    case FETCH_START:\n      {\n        return { ...statePart,\n          loading: {\n            active: true,\n            error: false\n          }\n        };\n      }\n\n    case FETCH_SUCCESS:\n      {\n        return { ...statePart,\n          loading: {\n            active: false,\n            error: false\n          },\n          data: action.payload\n        };\n      }\n\n    case FETCH_ERROR:\n      {\n        return { ...statePart,\n          loading: {\n            active: false,\n            error: action.payload\n          }\n        };\n      }\n\n    default:\n      return statePart;\n  }\n};","map":{"version":3,"sources":["/home/hiorii/Desktop/arduRob/client/src/redux/productRedux.js"],"names":["initialState","axios","API_URL","getAllProducts","products","reducerName","createActionName","name","FETCH_START","FETCH_SUCCESS","FETCH_ERROR","fetchStarted","payload","type","fetchSuccess","fetchError","fetchProducts","dispatch","res","get","console","log","err","message","reducer","statePart","action","loading","active","error","data"],"mappings":"AAAA,SAAQA,YAAR,QAA2B,gBAA3B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,OAAR,QAAsB,WAAtB;AAEA;;AACA,OAAO,MAAMC,cAAc,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAgBA,QAAvC;AAEP;;AACA,MAAMC,WAAW,GAAG,UAApB;;AACA,MAAMC,gBAAgB,GAAGC,IAAI,IAAK,OAAMF,WAAY,IAAGE,IAAK,EAA5D;AAEA;;;AACA,MAAMC,WAAW,GAAGF,gBAAgB,CAAC,aAAD,CAApC;AACA,MAAMG,aAAa,GAAGH,gBAAgB,CAAC,eAAD,CAAtC;AACA,MAAMI,WAAW,GAAGJ,gBAAgB,CAAC,aAAD,CAApC;AAEA;;AACA,OAAO,MAAMK,YAAY,GAAGC,OAAO,KAAK;AAAEA,EAAAA,OAAF;AAAWC,EAAAA,IAAI,EAAEL;AAAjB,CAAL,CAA5B;AACP,OAAO,MAAMM,YAAY,GAAGF,OAAO,KAAK;AAAEA,EAAAA,OAAF;AAAWC,EAAAA,IAAI,EAAEJ;AAAjB,CAAL,CAA5B;AACP,OAAO,MAAMM,UAAU,GAAGH,OAAO,KAAK;AAAEA,EAAAA,OAAF;AAAWC,EAAAA,IAAI,EAAEH;AAAjB,CAAL,CAA1B;AAEP;;AACA,OAAO,MAAMM,aAAa,GAAG,MAAM;AACjC,SAAO,MAAOC,QAAP,IAAoB;AACzBA,IAAAA,QAAQ,CAACN,YAAY,EAAb,CAAR;;AACA,QAAI;AACF,YAAMO,GAAG,GAAG,MAAMjB,KAAK,CAACkB,GAAN,CAAW,GAAEjB,OAAQ,WAArB,CAAlB;AACAe,MAAAA,QAAQ,CAACH,YAAY,CAACI,GAAD,CAAb,CAAR;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACD,KAJD,CAIE,OAAOI,GAAP,EAAY;AACZL,MAAAA,QAAQ,CAACF,UAAU,CAACO,GAAG,CAACC,OAAJ,IAAe,IAAhB,CAAX,CAAR;AACD;AACF,GATD;AAUD,CAXM;AAaP;;AACA,OAAO,MAAMC,OAAO,GAAG,CAACC,SAAS,GAAGzB,YAAb,EAA2B0B,MAAM,GAAG,EAApC,KAA2C;AAChE,UAAQA,MAAM,CAACb,IAAf;AACE,SAAKL,WAAL;AAAkB;AAChB,eAAO,EACL,GAAGiB,SADE;AAELE,UAAAA,OAAO,EAAE;AACPC,YAAAA,MAAM,EAAE,IADD;AAEPC,YAAAA,KAAK,EAAE;AAFA;AAFJ,SAAP;AAOD;;AACD,SAAKpB,aAAL;AAAoB;AAClB,eAAO,EACL,GAAGgB,SADE;AAELE,UAAAA,OAAO,EAAE;AACPC,YAAAA,MAAM,EAAE,KADD;AAEPC,YAAAA,KAAK,EAAE;AAFA,WAFJ;AAMLC,UAAAA,IAAI,EAAEJ,MAAM,CAACd;AANR,SAAP;AAQD;;AACD,SAAKF,WAAL;AAAkB;AAChB,eAAO,EACL,GAAGe,SADE;AAELE,UAAAA,OAAO,EAAE;AACPC,YAAAA,MAAM,EAAE,KADD;AAEPC,YAAAA,KAAK,EAAEH,MAAM,CAACd;AAFP;AAFJ,SAAP;AAOD;;AACD;AACE,aAAOa,SAAP;AA9BJ;AAgCD,CAjCM","sourcesContent":["import {initialState} from './initialState';\nimport axios from 'axios';\nimport {API_URL} from '../config';\n\n/* selectors */\nexport const getAllProducts = ({products}) => products;\n\n/* action name creator */\nconst reducerName = 'products';\nconst createActionName = name => `app/${reducerName}/${name}`;\n\n/* action types */\nconst FETCH_START = createActionName('FETCH_START');\nconst FETCH_SUCCESS = createActionName('FETCH_SUCCESS');\nconst FETCH_ERROR = createActionName('FETCH_ERROR');\n\n/* action creators */\nexport const fetchStarted = payload => ({ payload, type: FETCH_START });\nexport const fetchSuccess = payload => ({ payload, type: FETCH_SUCCESS });\nexport const fetchError = payload => ({ payload, type: FETCH_ERROR });\n\n/* thunk creators */\nexport const fetchProducts = () => {\n  return async (dispatch) => {\n    dispatch(fetchStarted());\n    try {\n      const res = await axios.get(`${API_URL}/products`);\n      dispatch(fetchSuccess(res));\n      console.log(res)\n    } catch (err) {\n      dispatch(fetchError(err.message || true));\n    }\n  };\n};\n\n/* reducer */\nexport const reducer = (statePart = initialState, action = {}) => {\n  switch (action.type) {\n    case FETCH_START: {\n      return {\n        ...statePart,\n        loading: {\n          active: true,\n          error: false,\n        },\n      };\n    }\n    case FETCH_SUCCESS: {\n      return {\n        ...statePart,\n        loading: {\n          active: false,\n          error: false,\n        },\n        data: action.payload,\n      };\n    }\n    case FETCH_ERROR: {\n      return {\n        ...statePart,\n        loading: {\n          active: false,\n          error: action.payload,\n        },\n      };\n    }\n    default:\n      return statePart;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}