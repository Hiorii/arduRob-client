{"ast":null,"code":"import { initialState } from './initialState';\n/* selectors */\n//export const getAllCart = () => JSON.parse(localStorage.getItem('cart'));\n\n/* action name creator */\n\nconst reducerName = 'cart';\n\nconst createActionName = name => `app/${reducerName}/${name}`;\n/* action types */\n\n\nconst HANDLE_ADD_QUANTITY = createActionName('HANDLE_ADD_QUANTITY');\nconst HANDLE_MINUS_QUANTITY = createActionName('HANDLE_MINUS_QUANTITY');\n/* action creators */\n\nexport const handleAddQuantity = payload => ({\n  payload,\n  type: HANDLE_ADD_QUANTITY\n});\nexport const handleMinusQuantity = payload => ({\n  payload,\n  type: HANDLE_MINUS_QUANTITY\n});\n/* reducer */\n\nexport const reducer = (statePart = initialState, action = {}) => {\n  switch (action.type) {\n    case HANDLE_ADD_QUANTITY:\n      {\n        const cartItems = JSON.parse(localStorage.getItem('cart')).data;\n        const updatedItems = cartItems.map(product => {\n          if (product._id === action.payload) {\n            product.cartQuantiy = product.cartQuantiy + 1;\n            return product;\n          } else {\n            return product;\n          }\n        });\n        localStorage.setItem('cart', JSON.stringify({\n          data: updatedItems\n        }));\n        return statePart;\n      }\n\n    case HANDLE_MINUS_QUANTITY:\n      {\n        const cartItems = JSON.parse(localStorage.getItem('cart')).data;\n        const updatedItems = cartItems.map(product => {\n          if (product._id === action.payload) {\n            product.cartQuantiy = product.cartQuantiy - 1;\n            return product;\n          } else {\n            return product;\n          }\n        });\n        localStorage.setItem('cart', JSON.stringify({\n          data: updatedItems\n        }));\n        return statePart;\n      }\n\n    default:\n      return statePart;\n  }\n};","map":{"version":3,"sources":["/home/hiorii/Desktop/arduRob/client/src/redux/cartRedux.js"],"names":["initialState","reducerName","createActionName","name","HANDLE_ADD_QUANTITY","HANDLE_MINUS_QUANTITY","handleAddQuantity","payload","type","handleMinusQuantity","reducer","statePart","action","cartItems","JSON","parse","localStorage","getItem","data","updatedItems","map","product","_id","cartQuantiy","setItem","stringify"],"mappings":"AAAA,SAAQA,YAAR,QAA2B,gBAA3B;AAEA;AACA;;AAEA;;AACA,MAAMC,WAAW,GAAG,MAApB;;AACA,MAAMC,gBAAgB,GAAGC,IAAI,IAAK,OAAMF,WAAY,IAAGE,IAAK,EAA5D;AAEA;;;AACA,MAAMC,mBAAmB,GAAGF,gBAAgB,CAAC,qBAAD,CAA5C;AACA,MAAMG,qBAAqB,GAAGH,gBAAgB,CAAC,uBAAD,CAA9C;AAEA;;AACA,OAAO,MAAMI,iBAAiB,GAAGC,OAAO,KAAK;AAAEA,EAAAA,OAAF;AAAWC,EAAAA,IAAI,EAAEJ;AAAjB,CAAL,CAAjC;AACP,OAAO,MAAMK,mBAAmB,GAAGF,OAAO,KAAK;AAAEA,EAAAA,OAAF;AAAWC,EAAAA,IAAI,EAAEH;AAAjB,CAAL,CAAnC;AAEP;;AACA,OAAO,MAAMK,OAAO,GAAG,CAACC,SAAS,GAAGX,YAAb,EAA2BY,MAAM,GAAG,EAApC,KAA2C;AAChE,UAAQA,MAAM,CAACJ,IAAf;AACE,SAAKJ,mBAAL;AAA0B;AACxB,cAAMS,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,EAAyCC,IAA3D;AACA,cAAMC,YAAY,GAAGN,SAAS,CAACO,GAAV,CAAcC,OAAO,IAAI;AAC5C,cAAGA,OAAO,CAACC,GAAR,KAAgBV,MAAM,CAACL,OAA1B,EAAmC;AACjCc,YAAAA,OAAO,CAACE,WAAR,GAAsBF,OAAO,CAACE,WAAR,GAAsB,CAA5C;AACA,mBAAOF,OAAP;AACD,WAHD,MAGO;AACL,mBAAOA,OAAP;AACD;AACF,SAPoB,CAArB;AAQAL,QAAAA,YAAY,CAACQ,OAAb,CAAqB,MAArB,EAA6BV,IAAI,CAACW,SAAL,CAAe;AAACP,UAAAA,IAAI,EAAEC;AAAP,SAAf,CAA7B;AACA,eAAOR,SAAP;AACD;;AACD,SAAKN,qBAAL;AAA4B;AAC1B,cAAMQ,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,EAAyCC,IAA3D;AACA,cAAMC,YAAY,GAAGN,SAAS,CAACO,GAAV,CAAcC,OAAO,IAAI;AAC5C,cAAGA,OAAO,CAACC,GAAR,KAAgBV,MAAM,CAACL,OAA1B,EAAmC;AACjCc,YAAAA,OAAO,CAACE,WAAR,GAAsBF,OAAO,CAACE,WAAR,GAAsB,CAA5C;AACA,mBAAOF,OAAP;AACD,WAHD,MAGO;AACL,mBAAOA,OAAP;AACD;AACF,SAPoB,CAArB;AAQAL,QAAAA,YAAY,CAACQ,OAAb,CAAqB,MAArB,EAA6BV,IAAI,CAACW,SAAL,CAAe;AAACP,UAAAA,IAAI,EAAEC;AAAP,SAAf,CAA7B;AACA,eAAOR,SAAP;AACD;;AACD;AACE,aAAOA,SAAP;AA5BJ;AA8BD,CA/BM","sourcesContent":["import {initialState} from './initialState';\n\n/* selectors */\n//export const getAllCart = () => JSON.parse(localStorage.getItem('cart'));\n\n/* action name creator */\nconst reducerName = 'cart';\nconst createActionName = name => `app/${reducerName}/${name}`;\n\n/* action types */\nconst HANDLE_ADD_QUANTITY = createActionName('HANDLE_ADD_QUANTITY');\nconst HANDLE_MINUS_QUANTITY = createActionName('HANDLE_MINUS_QUANTITY');\n\n/* action creators */\nexport const handleAddQuantity = payload => ({ payload, type: HANDLE_ADD_QUANTITY });\nexport const handleMinusQuantity = payload => ({ payload, type: HANDLE_MINUS_QUANTITY });\n\n/* reducer */\nexport const reducer = (statePart = initialState, action = {}) => {\n  switch (action.type) {\n    case HANDLE_ADD_QUANTITY: {\n      const cartItems = JSON.parse(localStorage.getItem('cart')).data;\n      const updatedItems = cartItems.map(product => {\n        if(product._id === action.payload) {\n          product.cartQuantiy = product.cartQuantiy + 1;\n          return product;\n        } else {\n          return product;\n        }\n      });\n      localStorage.setItem('cart', JSON.stringify({data: updatedItems}));\n      return statePart;\n    }\n    case HANDLE_MINUS_QUANTITY: {\n      const cartItems = JSON.parse(localStorage.getItem('cart')).data;\n      const updatedItems = cartItems.map(product => {\n        if(product._id === action.payload) {\n          product.cartQuantiy = product.cartQuantiy - 1;\n          return product;\n        } else {\n          return product;\n        }\n      });\n      localStorage.setItem('cart', JSON.stringify({data: updatedItems}));\n      return statePart;\n    }\n    default:\n      return statePart;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}