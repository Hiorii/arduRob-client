{"ast":null,"code":"import { initialState } from './initialState';\n/* selectors */\n//export const getAllCart = () => JSON.parse(localStorage.getItem('cart'));\n\n/* action name creator */\n\nconst reducerName = 'cart';\n\nconst createActionName = name => `app/${reducerName}/${name}`;\n/* action types */\n\n\nconst HANDLE_ADD_QUANTITY = createActionName('HANDLE_ADD_QUANTITY');\nconst HANDLE_MINUS_QUANTITY = createActionName('HANDLE_MINUS_QUANTITY');\nconst HANDLE_CLEAR_ITEM = createActionName('HANDLE_CLEAR_ITEM');\n/* action creators */\n\nexport const handleAddQuantity = payload => ({\n  payload,\n  type: HANDLE_ADD_QUANTITY\n});\nexport const handleMinusQuantity = payload => ({\n  payload,\n  type: HANDLE_MINUS_QUANTITY\n});\nexport const handleClear = payload => ({\n  payload,\n  type: HANDLE_CLEAR_ITEM\n});\n/* reducer */\n\nexport const reducer = (statePart = initialState, action = {}) => {\n  switch (action.type) {\n    case HANDLE_ADD_QUANTITY:\n      {\n        const cartItems = JSON.parse(localStorage.getItem('cart')).data;\n        const updatedItems = cartItems.map(product => {\n          if (product._id === action.payload) {\n            product.cartQuantiy = product.cartQuantiy + 1;\n            return product;\n          } else {\n            return product;\n          }\n        });\n        localStorage.setItem('cart', JSON.stringify({\n          data: updatedItems\n        }));\n        return statePart;\n      }\n\n    case HANDLE_MINUS_QUANTITY:\n      {\n        const cartItems = JSON.parse(localStorage.getItem('cart')).data;\n        const updatedItems = cartItems.map(product => {\n          if (product._id === action.payload) {\n            if (product.cartQuantiy > 1) {\n              product.cartQuantiy = product.cartQuantiy - 1;\n            }\n\n            return product;\n          } else {\n            return product;\n          }\n        });\n        localStorage.setItem('cart', JSON.stringify({\n          data: updatedItems\n        }));\n        return statePart;\n      }\n\n    case HANDLE_CLEAR_ITEM:\n      {\n        const cartItems = JSON.parse(localStorage.getItem('cart')).data;\n        const itemToRemove = cartItems.findIndex(product => product._id === action.payload);\n        const updatedItems = cartItems.splice(itemToRemove, 1);\n        localStorage.setItem('cart', JSON.stringify({\n          data: updatedItems\n        }));\n        return statePart;\n      }\n\n    default:\n      return statePart;\n  }\n};","map":{"version":3,"sources":["/home/hiorii/Desktop/arduRob/client/src/redux/cartRedux.js"],"names":["initialState","reducerName","createActionName","name","HANDLE_ADD_QUANTITY","HANDLE_MINUS_QUANTITY","HANDLE_CLEAR_ITEM","handleAddQuantity","payload","type","handleMinusQuantity","handleClear","reducer","statePart","action","cartItems","JSON","parse","localStorage","getItem","data","updatedItems","map","product","_id","cartQuantiy","setItem","stringify","itemToRemove","findIndex","splice"],"mappings":"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","sourcesContent":["import {initialState} from './initialState';\n\n/* selectors */\n//export const getAllCart = () => JSON.parse(localStorage.getItem('cart'));\n\n/* action name creator */\nconst reducerName = 'cart';\nconst createActionName = name => `app/${reducerName}/${name}`;\n\n/* action types */\nconst HANDLE_ADD_QUANTITY = createActionName('HANDLE_ADD_QUANTITY');\nconst HANDLE_MINUS_QUANTITY = createActionName('HANDLE_MINUS_QUANTITY');\nconst HANDLE_CLEAR_ITEM = createActionName('HANDLE_CLEAR_ITEM');\n\n/* action creators */\nexport const handleAddQuantity = payload => ({ payload, type: HANDLE_ADD_QUANTITY });\nexport const handleMinusQuantity = payload => ({ payload, type: HANDLE_MINUS_QUANTITY });\nexport const handleClear = payload => ({ payload, type: HANDLE_CLEAR_ITEM });\n\n/* reducer */\nexport const reducer = (statePart = initialState, action = {}) => {\n  switch (action.type) {\n    case HANDLE_ADD_QUANTITY: {\n      const cartItems = JSON.parse(localStorage.getItem('cart')).data;\n      const updatedItems = cartItems.map(product => {\n        if(product._id === action.payload) {\n          product.cartQuantiy = product.cartQuantiy + 1;\n          return product;\n        } else {\n          return product;\n        }\n      });\n      localStorage.setItem('cart', JSON.stringify({data: updatedItems}));\n      return statePart;\n    }\n    case HANDLE_MINUS_QUANTITY: {\n      const cartItems = JSON.parse(localStorage.getItem('cart')).data;\n      const updatedItems = cartItems.map(product => {\n        if(product._id === action.payload) {\n          if(product.cartQuantiy > 1) {\n            product.cartQuantiy = product.cartQuantiy - 1;\n          }\n          return product;\n        } else {\n          return product;\n        }\n      });\n      localStorage.setItem('cart', JSON.stringify({data: updatedItems}));\n      return statePart;\n    }\n    case HANDLE_CLEAR_ITEM: {\n      const cartItems = JSON.parse(localStorage.getItem('cart')).data;\n      const itemToRemove = cartItems.findIndex(product =>\n        product._id === action.payload\n      );\n      const updatedItems = cartItems.splice(itemToRemove,1);\n      localStorage.setItem('cart', JSON.stringify({data: updatedItems}));\n      return statePart;\n    }\n    default:\n      return statePart;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}