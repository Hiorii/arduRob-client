{"ast":null,"code":"import { initialState } from './initialState';\nimport axios from 'axios';\nimport { API_URL } from '../config';\n/* selectors */\n\nexport const getAllProducts = ({\n  products\n}) => products;\n/* action name creator */\n\nconst reducerName = 'products';\n\nconst createActionName = name => `app/${reducerName}/${name}`;\n/* action types */\n\n\nconst FETCH_START = createActionName('FETCH_START');\nconst FETCH_SUCCESS = createActionName('FETCH_SUCCESS');\nconst FETCH_ERROR = createActionName('FETCH_ERROR');\nconst ADD_TO_CART = createActionName('ADD_TO_CART');\nconst HANDLE_ADD_QUANTITY = createActionName('HANDLE_ADD_QUANTITY');\nconst HANDLE_MINUS_QUANTITY = createActionName('HANDLE_MINUS_QUANTITY');\n/* action creators */\n\nexport const fetchStarted = payload => ({\n  payload,\n  type: FETCH_START\n});\nexport const fetchSuccess = payload => ({\n  payload,\n  type: FETCH_SUCCESS\n});\nexport const fetchError = payload => ({\n  payload,\n  type: FETCH_ERROR\n});\nexport const addToCart = payload => ({\n  payload,\n  type: ADD_TO_CART\n});\nexport const handleAddQuantity = payload => ({\n  payload,\n  type: HANDLE_ADD_QUANTITY\n});\nexport const handleMinusQuantity = payload => ({\n  payload,\n  type: HANDLE_MINUS_QUANTITY\n});\n/* thunk creators */\n\nexport const fetchProducts = products => {\n  return async dispatch => {\n    dispatch(fetchStarted());\n\n    try {\n      const res = await axios.get(`${API_URL}/products`);\n      const products = JSON.parse(localStorage.getItem('products'));\n      dispatch(fetchSuccess(res.data));\n      localStorage.setItem('products', JSON.stringify(res.data));\n      products.forEach(product => product.cartQuantiy = 0);\n    } catch (err) {\n      dispatch(fetchError(err.message || true));\n    }\n  };\n};\n/* reducer */\n\nexport const reducer = (statePart = initialState, action = {}) => {\n  switch (action.type) {\n    case FETCH_START:\n      {\n        return { ...statePart,\n          loading: {\n            active: true,\n            error: false\n          }\n        };\n      }\n\n    case FETCH_SUCCESS:\n      {\n        action.payload.forEach(product => product.cartQuantiy = 0);\n        return { ...statePart,\n          loading: {\n            active: false,\n            error: false\n          },\n          data: action.payload\n        };\n      }\n\n    case FETCH_ERROR:\n      {\n        return { ...statePart,\n          loading: {\n            active: false,\n            error: action.payload\n          }\n        };\n      }\n\n    case ADD_TO_CART:\n      {\n        const products = JSON.parse(localStorage.getItem('products'));\n        const newStatePart = products === null || products === void 0 ? void 0 : products.map(product => {\n          if (product._id === action.payload._id) {\n            if (product.cartQuantiy === 0) {\n              product.cartQuantiy = product.cartQuantiy + 1;\n            }\n\n            return product;\n          } else {\n            return product;\n          }\n        });\n        console.log(products);\n        console.log(newStatePart); // localStorage.setItem('products', JSON.stringify({...statePart,\n        //   newStatePart}));\n        // const updatedItems = products.filter(item=>item.cartQuantiy > 0);\n        // localStorage.setItem('cart', JSON.stringify({...statePart,\n        //   data: updatedItems}));\n\n        return { ...statePart,\n          data: newStatePart\n        };\n      }\n\n    case HANDLE_ADD_QUANTITY:\n      {\n        var _statePart$data;\n\n        const newStatePart = (_statePart$data = statePart.data) === null || _statePart$data === void 0 ? void 0 : _statePart$data.map(product => {\n          if (product._id === action.payload) {\n            product.cartQuantiy = product.cartQuantiy + 1;\n            return product;\n          } else {\n            return product;\n          }\n        });\n        return { ...statePart,\n          data: newStatePart\n        };\n      }\n\n    case HANDLE_MINUS_QUANTITY:\n      {\n        var _statePart$data2;\n\n        const newStatePart = (_statePart$data2 = statePart.data) === null || _statePart$data2 === void 0 ? void 0 : _statePart$data2.map(product => {\n          if (product._id === action.payload) {\n            if (product.cartQuantiy > 1) {\n              product.cartQuantiy = product.cartQuantiy - 1;\n            }\n\n            return product;\n          } else {\n            return product;\n          }\n        });\n        return { ...statePart,\n          data: newStatePart\n        };\n      }\n\n    default:\n      return statePart;\n  }\n};","map":{"version":3,"sources":["/home/hiorii/Desktop/arduRob/client/src/redux/productRedux.js"],"names":["initialState","axios","API_URL","getAllProducts","products","reducerName","createActionName","name","FETCH_START","FETCH_SUCCESS","FETCH_ERROR","ADD_TO_CART","HANDLE_ADD_QUANTITY","HANDLE_MINUS_QUANTITY","fetchStarted","payload","type","fetchSuccess","fetchError","addToCart","handleAddQuantity","handleMinusQuantity","fetchProducts","dispatch","res","get","JSON","parse","localStorage","getItem","data","setItem","stringify","forEach","product","cartQuantiy","err","message","reducer","statePart","action","loading","active","error","newStatePart","map","_id","console","log"],"mappings":"AAAA,SAAQA,YAAR,QAA2B,gBAA3B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,OAAR,QAAsB,WAAtB;AAEA;;AACA,OAAO,MAAMC,cAAc,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAgBA,QAAvC;AAEP;;AACA,MAAMC,WAAW,GAAG,UAApB;;AACA,MAAMC,gBAAgB,GAAGC,IAAI,IAAK,OAAMF,WAAY,IAAGE,IAAK,EAA5D;AAEA;;;AACA,MAAMC,WAAW,GAAGF,gBAAgB,CAAC,aAAD,CAApC;AACA,MAAMG,aAAa,GAAGH,gBAAgB,CAAC,eAAD,CAAtC;AACA,MAAMI,WAAW,GAAGJ,gBAAgB,CAAC,aAAD,CAApC;AACA,MAAMK,WAAW,GAAGL,gBAAgB,CAAC,aAAD,CAApC;AACA,MAAMM,mBAAmB,GAAGN,gBAAgB,CAAC,qBAAD,CAA5C;AACA,MAAMO,qBAAqB,GAAGP,gBAAgB,CAAC,uBAAD,CAA9C;AAEA;;AACA,OAAO,MAAMQ,YAAY,GAAGC,OAAO,KAAK;AAAEA,EAAAA,OAAF;AAAWC,EAAAA,IAAI,EAAER;AAAjB,CAAL,CAA5B;AACP,OAAO,MAAMS,YAAY,GAAGF,OAAO,KAAK;AAAEA,EAAAA,OAAF;AAAWC,EAAAA,IAAI,EAAEP;AAAjB,CAAL,CAA5B;AACP,OAAO,MAAMS,UAAU,GAAGH,OAAO,KAAK;AAAEA,EAAAA,OAAF;AAAWC,EAAAA,IAAI,EAAEN;AAAjB,CAAL,CAA1B;AACP,OAAO,MAAMS,SAAS,GAAGJ,OAAO,KAAK;AAAEA,EAAAA,OAAF;AAAWC,EAAAA,IAAI,EAAEL;AAAjB,CAAL,CAAzB;AACP,OAAO,MAAMS,iBAAiB,GAAGL,OAAO,KAAK;AAAEA,EAAAA,OAAF;AAAWC,EAAAA,IAAI,EAAEJ;AAAjB,CAAL,CAAjC;AACP,OAAO,MAAMS,mBAAmB,GAAGN,OAAO,KAAK;AAAEA,EAAAA,OAAF;AAAWC,EAAAA,IAAI,EAAEH;AAAjB,CAAL,CAAnC;AAEP;;AACA,OAAO,MAAMS,aAAa,GAAIlB,QAAD,IAAc;AACzC,SAAO,MAAOmB,QAAP,IAAoB;AACzBA,IAAAA,QAAQ,CAACT,YAAY,EAAb,CAAR;;AACA,QAAI;AACF,YAAMU,GAAG,GAAG,MAAMvB,KAAK,CAACwB,GAAN,CAAW,GAAEvB,OAAQ,WAArB,CAAlB;AACA,YAAME,QAAQ,GAAGsB,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAX,CAAjB;AACAN,MAAAA,QAAQ,CAACN,YAAY,CAACO,GAAG,CAACM,IAAL,CAAb,CAAR;AACAF,MAAAA,YAAY,CAACG,OAAb,CAAqB,UAArB,EAAiCL,IAAI,CAACM,SAAL,CAAeR,GAAG,CAACM,IAAnB,CAAjC;AACA1B,MAAAA,QAAQ,CAAC6B,OAAT,CAAiBC,OAAO,IAAIA,OAAO,CAACC,WAAR,GAAsB,CAAlD;AACD,KAND,CAME,OAAOC,GAAP,EAAY;AACZb,MAAAA,QAAQ,CAACL,UAAU,CAACkB,GAAG,CAACC,OAAJ,IAAe,IAAhB,CAAX,CAAR;AACD;AACF,GAXD;AAYD,CAbM;AAeP;;AACA,OAAO,MAAMC,OAAO,GAAG,CAACC,SAAS,GAAGvC,YAAb,EAA2BwC,MAAM,GAAG,EAApC,KAA2C;AAChE,UAAQA,MAAM,CAACxB,IAAf;AACE,SAAKR,WAAL;AAAkB;AAChB,eAAO,EACL,GAAG+B,SADE;AAELE,UAAAA,OAAO,EAAE;AACPC,YAAAA,MAAM,EAAE,IADD;AAEPC,YAAAA,KAAK,EAAE;AAFA;AAFJ,SAAP;AAOD;;AACD,SAAKlC,aAAL;AAAoB;AAClB+B,QAAAA,MAAM,CAACzB,OAAP,CAAekB,OAAf,CAAuBC,OAAO,IAAIA,OAAO,CAACC,WAAR,GAAsB,CAAxD;AACA,eAAO,EACL,GAAGI,SADE;AAELE,UAAAA,OAAO,EAAE;AACPC,YAAAA,MAAM,EAAE,KADD;AAEPC,YAAAA,KAAK,EAAE;AAFA,WAFJ;AAMLb,UAAAA,IAAI,EAAEU,MAAM,CAACzB;AANR,SAAP;AAQD;;AACD,SAAKL,WAAL;AAAkB;AAChB,eAAO,EACL,GAAG6B,SADE;AAELE,UAAAA,OAAO,EAAE;AACPC,YAAAA,MAAM,EAAE,KADD;AAEPC,YAAAA,KAAK,EAAEH,MAAM,CAACzB;AAFP;AAFJ,SAAP;AAOD;;AACD,SAAKJ,WAAL;AAAkB;AAChB,cAAMP,QAAQ,GAAGsB,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAX,CAAjB;AACA,cAAMe,YAAY,GAAGxC,QAAH,aAAGA,QAAH,uBAAGA,QAAQ,CAAEyC,GAAV,CAAcX,OAAO,IAAI;AAC5C,cAAIA,OAAO,CAACY,GAAR,KAAgBN,MAAM,CAACzB,OAAP,CAAe+B,GAAnC,EAAwC;AACtC,gBAAGZ,OAAO,CAACC,WAAR,KAAwB,CAA3B,EAA8B;AAC5BD,cAAAA,OAAO,CAACC,WAAR,GAAsBD,OAAO,CAACC,WAAR,GAAsB,CAA5C;AACD;;AACD,mBAAOD,OAAP;AACD,WALD,MAKO;AACL,mBAAOA,OAAP;AACD;AACF,SAToB,CAArB;AAUAa,QAAAA,OAAO,CAACC,GAAR,CAAY5C,QAAZ;AACA2C,QAAAA,OAAO,CAACC,GAAR,CAAYJ,YAAZ,EAbgB,CAchB;AACA;AACA;AACA;AACA;;AACA,eAAO,EACL,GAAGL,SADE;AAELT,UAAAA,IAAI,EAAEc;AAFD,SAAP;AAID;;AACD,SAAKhC,mBAAL;AAA0B;AAAA;;AACxB,cAAMgC,YAAY,sBAAGL,SAAS,CAACT,IAAb,oDAAG,gBAAgBe,GAAhB,CAAoBX,OAAO,IAAI;AAClD,cAAIA,OAAO,CAACY,GAAR,KAAgBN,MAAM,CAACzB,OAA3B,EAAoC;AAClCmB,YAAAA,OAAO,CAACC,WAAR,GAAsBD,OAAO,CAACC,WAAR,GAAsB,CAA5C;AACA,mBAAOD,OAAP;AACD,WAHD,MAGO;AACL,mBAAOA,OAAP;AACD;AACF,SAPoB,CAArB;AAQA,eAAO,EACL,GAAGK,SADE;AAELT,UAAAA,IAAI,EAAEc;AAFD,SAAP;AAID;;AACD,SAAK/B,qBAAL;AAA4B;AAAA;;AAC1B,cAAM+B,YAAY,uBAAGL,SAAS,CAACT,IAAb,qDAAG,iBAAgBe,GAAhB,CAAoBX,OAAO,IAAI;AAClD,cAAIA,OAAO,CAACY,GAAR,KAAgBN,MAAM,CAACzB,OAA3B,EAAoC;AAClC,gBAAGmB,OAAO,CAACC,WAAR,GAAsB,CAAzB,EAA4B;AAC1BD,cAAAA,OAAO,CAACC,WAAR,GAAsBD,OAAO,CAACC,WAAR,GAAsB,CAA5C;AACD;;AACD,mBAAOD,OAAP;AACD,WALD,MAKO;AACL,mBAAOA,OAAP;AACD;AACF,SAToB,CAArB;AAUA,eAAO,EACL,GAAGK,SADE;AAELT,UAAAA,IAAI,EAAEc;AAFD,SAAP;AAID;;AACD;AACE,aAAOL,SAAP;AArFJ;AAuFD,CAxFM","sourcesContent":["import {initialState} from './initialState';\nimport axios from 'axios';\nimport {API_URL} from '../config';\n\n/* selectors */\nexport const getAllProducts = ({products}) => products;\n\n/* action name creator */\nconst reducerName = 'products';\nconst createActionName = name => `app/${reducerName}/${name}`;\n\n/* action types */\nconst FETCH_START = createActionName('FETCH_START');\nconst FETCH_SUCCESS = createActionName('FETCH_SUCCESS');\nconst FETCH_ERROR = createActionName('FETCH_ERROR');\nconst ADD_TO_CART = createActionName('ADD_TO_CART');\nconst HANDLE_ADD_QUANTITY = createActionName('HANDLE_ADD_QUANTITY');\nconst HANDLE_MINUS_QUANTITY = createActionName('HANDLE_MINUS_QUANTITY');\n\n/* action creators */\nexport const fetchStarted = payload => ({ payload, type: FETCH_START });\nexport const fetchSuccess = payload => ({ payload, type: FETCH_SUCCESS });\nexport const fetchError = payload => ({ payload, type: FETCH_ERROR });\nexport const addToCart = payload => ({ payload, type: ADD_TO_CART });\nexport const handleAddQuantity = payload => ({ payload, type: HANDLE_ADD_QUANTITY });\nexport const handleMinusQuantity = payload => ({ payload, type: HANDLE_MINUS_QUANTITY });\n\n/* thunk creators */\nexport const fetchProducts = (products) => {\n  return async (dispatch) => {\n    dispatch(fetchStarted());\n    try {\n      const res = await axios.get(`${API_URL}/products`);\n      const products = JSON.parse(localStorage.getItem('products'));\n      dispatch(fetchSuccess(res.data));\n      localStorage.setItem('products', JSON.stringify(res.data));\n      products.forEach(product => product.cartQuantiy = 0);\n    } catch (err) {\n      dispatch(fetchError(err.message || true));\n    }\n  };\n};\n\n/* reducer */\nexport const reducer = (statePart = initialState, action = {}) => {\n  switch (action.type) {\n    case FETCH_START: {\n      return {\n        ...statePart,\n        loading: {\n          active: true,\n          error: false,\n        },\n      };\n    }\n    case FETCH_SUCCESS: {\n      action.payload.forEach(product => product.cartQuantiy = 0);\n      return {\n        ...statePart,\n        loading: {\n          active: false,\n          error: false,\n        },\n        data: action.payload,\n      };\n    }\n    case FETCH_ERROR: {\n      return {\n        ...statePart,\n        loading: {\n          active: false,\n          error: action.payload,\n        },\n      };\n    }\n    case ADD_TO_CART: {\n      const products = JSON.parse(localStorage.getItem('products'));\n      const newStatePart = products?.map(product => {\n        if (product._id === action.payload._id) {\n          if(product.cartQuantiy === 0) {\n            product.cartQuantiy = product.cartQuantiy + 1;\n          }\n          return product;\n        } else {\n          return product;\n        }\n      });\n      console.log(products);\n      console.log(newStatePart);\n      // localStorage.setItem('products', JSON.stringify({...statePart,\n      //   newStatePart}));\n      // const updatedItems = products.filter(item=>item.cartQuantiy > 0);\n      // localStorage.setItem('cart', JSON.stringify({...statePart,\n      //   data: updatedItems}));\n      return {\n        ...statePart,\n        data: newStatePart,\n      };\n    }\n    case HANDLE_ADD_QUANTITY: {\n      const newStatePart = statePart.data?.map(product => {\n        if (product._id === action.payload) {\n          product.cartQuantiy = product.cartQuantiy + 1;\n          return product;\n        } else {\n          return product;\n        }\n      });\n      return {\n        ...statePart,\n        data: newStatePart,\n      };\n    }\n    case HANDLE_MINUS_QUANTITY: {\n      const newStatePart = statePart.data?.map(product => {\n        if (product._id === action.payload) {\n          if(product.cartQuantiy > 1) {\n            product.cartQuantiy = product.cartQuantiy - 1;\n          }\n          return product;\n        } else {\n          return product;\n        }\n      });\n      return {\n        ...statePart,\n        data: newStatePart,\n      };\n    }\n    default:\n      return statePart;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}